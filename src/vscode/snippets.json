{
  "ZeroThrow Ok Result": {
    "prefix": "ztok",
    "body": [
      "return ok(${1:value});"
    ],
    "description": "Return an Ok result"
  },
  
  "ZeroThrow Err Result": {
    "prefix": "zterr", 
    "body": [
      "return err(new ZeroError('${1:ERROR_CODE}', '${2:Error message}'));"
    ],
    "description": "Return an Err result with ZeroError"
  },
  
  "ZeroThrow Error Creation": {
    "prefix": "zterror",
    "body": [
      "new ZeroError('${1:ERROR_CODE}', '${2:Error message}'${3:, { details: \\{ ${4} \\} \\}})"
    ],
    "description": "Create a new ZeroError instance"
  },
  
  "ZeroThrow Result Type": {
    "prefix": "ztresult",
    "body": [
      "Result<${1:T}, ${2:ZeroError}>"
    ],
    "description": "ZeroThrow Result type annotation"
  },
  
  "ZeroThrow Async Function": {
    "prefix": "ztasync",
    "body": [
      "async function ${1:functionName}(${2:params}): Promise<Result<${3:ReturnType}, ZeroError>> {",
      "  try {",
      "    ${4:// implementation}",
      "    return ok(${5:result});",
      "  } catch (error) {",
      "    return err(new ZeroError('${6:ERROR_CODE}', '${7:Error message}', { cause: error }));",
      "  }",
      "}"
    ],
    "description": "Async function returning Result"
  },
  
  "ZeroThrow Result Handler": {
    "prefix": "zthandle",
    "body": [
      "const result = await ${1:asyncFunction}();",
      "if (result.isErr()) {",
      "  ${2:// handle error}",
      "  return result;",
      "}",
      "const ${3:value} = result.value;"
    ],
    "description": "Handle a Result type"
  },
  
  "ZeroThrow Result Match": {
    "prefix": "ztmatch",
    "body": [
      "result.match({",
      "  ok: (${1:value}) => {",
      "    ${2:// handle success}",
      "  },",
      "  err: (${3:error}) => {",
      "    ${4:// handle error}",
      "  }",
      "});"
    ],
    "description": "Pattern match on Result"
  },
  
  "ZeroThrow Map Result": {
    "prefix": "ztmap",
    "body": [
      "result.map(${1:value} => ${2:transformation})"
    ],
    "description": "Map over a successful Result"
  },
  
  "ZeroThrow Chain Results": {
    "prefix": "ztchain",
    "body": [
      "result",
      "  .andThen(${1:value} => ${2:nextOperation})",
      "  .mapErr(${3:error} => ${4:errorTransformation})"
    ],
    "description": "Chain Result operations"
  },
  
  "ZeroThrow Import": {
    "prefix": "ztimport",
    "body": [
      "import { Result, ok, err, ZeroError } from 'zerothrow';"
    ],
    "description": "Import ZeroThrow essentials"
  }
}