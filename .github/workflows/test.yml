name: Test Suite

on:
  push:
    branches: [ main, develop, 'team-*' ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test -- --reporter=verbose

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: coverage-report
        path: coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run integration tests
      run: npx vitest run --config vitest.integration.config.ts --reporter=verbose

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          test-results/
          coverage/

  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run all tests with coverage
      run: |
        npm test -- --coverage
        npx vitest run --config vitest.integration.config.ts --coverage

    - name: Check coverage thresholds
      run: |
        echo "Checking coverage meets >90% threshold..."
        npx vitest run --coverage --reporter=json > coverage-summary.json
        node -e "
          const coverage = require('./coverage/coverage-summary.json');
          const total = coverage.total;
          const metrics = ['lines', 'statements', 'functions', 'branches'];
          let passed = true;
          metrics.forEach(metric => {
            const pct = total[metric].pct;
            console.log(\`\${metric}: \${pct}%\`);
            if (pct < 90) {
              console.error(\`‚ùå \${metric} coverage (\${pct}%) is below 90%\`);
              passed = false;
            }
          });
          if (!passed) process.exit(1);
          console.log('‚úÖ All coverage metrics meet the >90% threshold');
        "

    - name: Generate coverage badge
      uses: cicirello/jacoco-badge-generator@v2
      if: github.ref == 'refs/heads/main'
      with:
        coverage-badge-filename: coverage.svg
        generate-coverage-badge: true

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance benchmarks
      run: |
        echo "Running performance benchmarks..."
        npx vitest run test/integration/performance.test.ts --reporter=verbose || {
          echo "‚ùå Performance tests failed!"
          echo "Running again with more details..."
          npx vitest run test/integration/performance.test.ts --reporter=verbose --no-coverage
          exit 1
        }

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.json

    - name: Display benchmark summary
      run: |
        echo "## Performance Benchmark Results"
        cat benchmark-results.json | jq -r '.summary // "See artifacts for detailed results"' || echo "Results saved to artifacts"

  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint-check, unit-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Check build output
      run: |
        if [ ! -d "dist" ]; then
          echo "Build failed: dist directory not found"
          exit 1
        fi
        echo "Build successful: dist directory created"

  all-tests-pass:
    name: All Tests Pass
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, coverage-check, performance-tests, lint-check, build-check]
    if: always()

    steps:
    - name: Check all test results
      run: |
        echo "üìä Test Results Summary:"
        echo "  Unit Tests:        ${{ needs.unit-tests.result }}"
        echo "  Integration Tests: ${{ needs.integration-tests.result }}"
        echo "  Coverage Check:    ${{ needs.coverage-check.result }}"
        echo "  Performance Tests: ${{ needs.performance-tests.result }}"
        echo "  Lint Check:        ${{ needs.lint-check.result }}"
        echo "  Build Check:       ${{ needs.build-check.result }}"
        echo ""
        
        FAILED_JOBS=()
        [ "${{ needs.unit-tests.result }}" != "success" ] && FAILED_JOBS+=("unit-tests")
        [ "${{ needs.integration-tests.result }}" != "success" ] && FAILED_JOBS+=("integration-tests")
        [ "${{ needs.coverage-check.result }}" != "success" ] && FAILED_JOBS+=("coverage-check")
        [ "${{ needs.performance-tests.result }}" != "success" ] && FAILED_JOBS+=("performance-tests")
        [ "${{ needs.lint-check.result }}" != "success" ] && FAILED_JOBS+=("lint-check")
        [ "${{ needs.build-check.result }}" != "success" ] && FAILED_JOBS+=("build-check")
        
        if [ ${#FAILED_JOBS[@]} -ne 0 ]; then
          echo "‚ùå The following jobs failed:"
          for job in "${FAILED_JOBS[@]}"; do
            echo "   - $job"
          done
          echo ""
          echo "Please check the logs for each failed job above for details."
          exit 1
        fi
        echo "‚úÖ All tests passed successfully!"