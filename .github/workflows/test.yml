name: Test Suite

on:
  push:
    branches: [ main, develop, 'team-*' ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        npm test -- --reporter=verbose 2>&1 | tee test.log || {
          echo ""
          echo "‚ùå Unit tests failed! Summary:"
          echo "=============================="
          grep -E "(‚úì|√ó|FAIL|Error:|at .*:\d+:\d+)" test.log | tail -50
          echo "=============================="
          echo ""
          echo "üí° To debug locally:"
          echo "  npm test -- --reporter=verbose"
          exit 1
        }
        echo "‚úÖ Unit tests passed!"

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: coverage-report
        path: coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run integration tests
      run: |
        echo "üß™ Running integration tests..."
        npx vitest run --config vitest.integration.config.ts --reporter=verbose 2>&1 | tee integration-test.log || {
          echo ""
          echo "‚ùå Integration tests failed! Summary:"
          echo "=====================================" 
          grep -E "(‚úì|√ó|FAIL|Error:|at .*:\d+:\d+)" integration-test.log | tail -50
          echo "====================================="
          echo ""
          echo "üí° To debug locally:"
          echo "  npx vitest run --config vitest.integration.config.ts --reporter=verbose"
          exit 1
        }
        echo "‚úÖ Integration tests passed!"

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          test-results/
          coverage/

  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run all tests with coverage
      run: |
        echo "üìä Running unit tests with coverage..."
        npm test -- --reporter=verbose || {
          echo "‚ùå Unit tests failed!"
          exit 1
        }
        echo ""
        echo "üìä Running integration tests with coverage..."
        npx vitest run --config vitest.integration.config.ts --coverage --reporter=verbose || {
          echo "‚ùå Integration tests failed!"
          exit 1
        }

    - name: Check coverage thresholds
      run: |
        echo "üìä Checking coverage meets >90% threshold..."
        echo ""
        
        # First, show the coverage summary (using base config which excludes performance tests)
        npm test -- --reporter=verbose || true
        
        # Now check the thresholds
        if [ -f "coverage/coverage-summary.json" ]; then
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            const metrics = ['lines', 'statements', 'functions', 'branches'];
            let passed = true;
            
            console.log('üìä Coverage Summary:');
            console.log('==================');
            metrics.forEach(metric => {
              const pct = total[metric].pct;
              const status = pct >= 90 ? '‚úÖ' : '‚ùå';
              console.log(\`\${status} \${metric}: \${pct}%\`);
              if (pct < 90) {
                passed = false;
              }
            });
            
            console.log('');
            if (!passed) {
              console.error('‚ùå Coverage is below the 90% threshold!');
              console.error('');
              console.error('To see which lines are not covered:');
              console.error('1. Run: npm test -- --coverage');
              console.error('2. Check the coverage/lcov-report/index.html file');
              process.exit(1);
            }
            console.log('‚úÖ All coverage metrics meet the >90% threshold');
          "
        else
          echo "‚ùå Coverage summary file not found!"
          echo "This usually means the tests failed to run properly."
          exit 1
        fi

    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        # Extract coverage percentage from vitest coverage JSON
        COVERAGE=$(node -e "
          const summary = require('./coverage/coverage-summary.json');
          const total = summary.total;
          const pct = (total.lines.pct + total.statements.pct + total.functions.pct + total.branches.pct) / 4;
          console.log(Math.round(pct));
        ")
        
        # Generate badge URL using shields.io
        BADGE_COLOR="red"
        if [ "$COVERAGE" -ge 80 ]; then
          BADGE_COLOR="green"
        elif [ "$COVERAGE" -ge 60 ]; then
          BADGE_COLOR="yellow"
        fi
        
        echo "Coverage: ${COVERAGE}%"
        echo "Badge color: ${BADGE_COLOR}"
        
        # Create coverage badge using shields.io
        curl -s "https://img.shields.io/badge/coverage-${COVERAGE}%25-${BADGE_COLOR}" > coverage.svg


  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: |
        echo "üîç Running ESLint..."
        npm run lint 2>&1 | tee lint.log || {
          echo ""
          echo "‚ùå Lint check failed! Issues found:"
          echo "===================================="
          cat lint.log
          echo "===================================="
          echo ""
          echo "üí° To fix automatically:"
          echo "  npm run lint -- --fix"
          echo ""
          echo "üí° To debug specific files:"
          echo "  npx eslint path/to/file.ts"
          exit 1
        }
        echo "‚úÖ Lint check passed!"

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint-check, unit-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: |
        echo "üî® Building project..."
        npm run build 2>&1 | tee build.log || {
          echo ""
          echo "‚ùå Build failed! Here's the error output:"
          echo "==========================================="
          cat build.log
          echo "==========================================="
          echo ""
          echo "üí° Common build issues:"
          echo "  - Missing dependencies: Run 'npm install'"
          echo "  - TypeScript errors: Check the errors above"
          echo "  - Module resolution: Check tsconfig.json paths"
          exit 1
        }

    - name: Check build output
      run: |
        if [ ! -d "dist" ]; then
          echo "‚ùå Build failed: dist directory not found"
          echo "This indicates the build process didn't complete successfully."
          exit 1
        fi
        echo "‚úÖ Build successful: dist directory created"

  all-tests-pass:
    name: All Tests Pass
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, coverage-check, lint-check, build-check]
    if: always()

    steps:
    - name: Check all test results
      run: |
        echo "üìä Test Results Summary:"
        echo "============================"
        
        # Display results with emojis
        [ "${{ needs.unit-tests.result }}" == "success" ] && echo "‚úÖ Unit Tests:        PASSED" || echo "‚ùå Unit Tests:        FAILED"
        [ "${{ needs.integration-tests.result }}" == "success" ] && echo "‚úÖ Integration Tests: PASSED" || echo "‚ùå Integration Tests: FAILED"
        [ "${{ needs.coverage-check.result }}" == "success" ] && echo "‚úÖ Coverage Check:    PASSED" || echo "‚ùå Coverage Check:    FAILED"
        [ "${{ needs.lint-check.result }}" == "success" ] && echo "‚úÖ Lint Check:        PASSED" || echo "‚ùå Lint Check:        FAILED"
        [ "${{ needs.build-check.result }}" == "success" ] && echo "‚úÖ Build Check:       PASSED" || echo "‚ùå Build Check:       FAILED"
        
        echo "============================"
        echo ""
        
        FAILED_JOBS=()
        [ "${{ needs.unit-tests.result }}" != "success" ] && [ "${{ needs.unit-tests.result }}" != "skipped" ] && FAILED_JOBS+=("unit-tests")
        [ "${{ needs.integration-tests.result }}" != "success" ] && [ "${{ needs.integration-tests.result }}" != "skipped" ] && FAILED_JOBS+=("integration-tests")
        [ "${{ needs.coverage-check.result }}" != "success" ] && [ "${{ needs.coverage-check.result }}" != "skipped" ] && FAILED_JOBS+=("coverage-check")
        [ "${{ needs.lint-check.result }}" != "success" ] && [ "${{ needs.lint-check.result }}" != "skipped" ] && FAILED_JOBS+=("lint-check")
        [ "${{ needs.build-check.result }}" != "success" ] && [ "${{ needs.build-check.result }}" != "skipped" ] && FAILED_JOBS+=("build-check")
        
        if [ ${#FAILED_JOBS[@]} -ne 0 ]; then
          echo "‚ùå FAILED JOBS:"
          echo "==============="
          for job in "${FAILED_JOBS[@]}"; do
            echo "  üî¥ $job"
            echo "     üëâ Click on '$job' job above to see detailed error output"
            echo ""
          done
          echo ""
          echo "üí° Quick debugging tips:"
          echo "  - Unit Tests: Check for broken imports or syntax errors"
          echo "  - Integration Tests: Verify external dependencies are mocked"
          echo "  - Coverage: Run 'npm test -- --coverage' to see uncovered lines"
          echo "  - Lint: Run 'npm run lint -- --fix' to auto-fix issues"
          echo "  - Build: Check for TypeScript errors or missing dependencies"
          exit 1
        fi
        echo "‚úÖ All tests passed successfully! üéâ"