name: CI

on:
  push:
    branches: [ main, develop, 'feature/**', 'dogfood' ]
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Build project
      run: npm run build

    - name: Check types
      run: npx tsc --noEmit

  test-matrix:
    name: Tests (${{ matrix.os }} / Node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: ['18.x', '20.x']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test -- --reporter=verbose

    - name: Run integration tests
      run: npm run test:integration
      continue-on-error: ${{ matrix.os == 'windows-latest' }} # Windows Docker issues

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node }}
        path: |
          coverage/
          test-results/

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [quality-checks, test-matrix]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: |
        npm test
        npm run test:integration || true # Don't fail on integration test issues

    - name: Check coverage thresholds
      run: npx tsx scripts/ci/coverage-check.ts --threshold 90

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/lcov.info
        flags: unittests
        fail_ci_if_error: false

  all-checks-pass:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality-checks, test-matrix, coverage]
    if: always()

    steps:
    - name: Check CI results
      run: |
        echo "üìä CI Results Summary:"
        echo "======================"
        
        [ "${{ needs.quality-checks.result }}" == "success" ] && echo "‚úÖ Quality Checks: PASSED" || echo "‚ùå Quality Checks: FAILED"
        [ "${{ needs.test-matrix.result }}" == "success" ] && echo "‚úÖ Test Matrix:    PASSED" || echo "‚ùå Test Matrix:    FAILED"
        [ "${{ needs.coverage.result }}" == "success" ] && echo "‚úÖ Coverage:       PASSED" || echo "‚ùå Coverage:       FAILED"
        
        echo "======================"
        
        if [ "${{ needs.quality-checks.result }}" != "success" ] || \
           [ "${{ needs.test-matrix.result }}" != "success" ] || \
           [ "${{ needs.coverage.result }}" != "success" ]; then
          echo "‚ùå CI Failed"
          exit 1
        fi
        
        echo "‚úÖ All CI checks passed!"